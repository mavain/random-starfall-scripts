--@name Voronoi or something
--@author Mavain
--@client

local mathfloor = math.floor
local mathclamp = math.clamp
local mathlerp = math.lerp
local mathcos = math.cos
local function perflerp(t, a, b)
    return t*(b-a)+a
end
local function hermitelerp(t, a, b)
    local d = t*t*(3-2*t)
    return t*(b-a)+a
end

local VoronoiSampler = {}
VoronoiSampler.__index = VoronoiSampler
setmetatable(VoronoiSampler, {
    __call = function(self, frequency, distanceFunction)
        local layer = {}
        setmetatable(layer, VoronoiSampler)
        layer.frequency = frequency
        layer.distanceFunction = distanceFunction
        local pointTable = {}
        local rand = math.random
        for y = 0, frequency - 1 do
            for x = 0, frequency - 1 do
                local k = x + y * frequency
                pointTable[k] = Vector(rand() + x, rand() + y)
            end
        end
        layer.samplePoints = pointTable
        return layer
    end
})

function VoronoiSampler:sample(normalizedPixelPos)
    local pixelPos = normalizedPixelPos * self.frequency
    
    local cellX = mathfloor(pixelPos.x)
    local cellY = mathfloor(pixelPos.y)
    
    local d = 999999999
    
    for crx = -1, 1 do
        for cry = -1, 1 do
        
            local crxw = mathclamp(crx + cellX, 0, self.frequency - 1)
            local cryw = mathclamp(cry + cellY, 0, self.frequency - 1)
            
            local cellPos = self.samplePoints[crxw + cryw * self.frequency]
            
            local curDist = self.distanceFunction(pixelPos, cellPos)
            if curDist < d then d = curDist end
            
        end
    end
    
    return d
end

local LerpSampler = {}
LerpSampler.__index = LerpSampler
setmetatable(LerpSampler, {
    __call = function(self, frequency)
        local layer = {}
        setmetatable(layer, LerpSampler)
        layer.frequency = frequency
        local pointTable = {}
        local rand = math.random
        for y = 0, frequency - 1 do
            for x = 0, frequency - 1 do
                local k = x + y * frequency
                pointTable[k] = rand()
            end
        end
        layer.samplePoints = pointTable
        return layer
    end
})

function LerpSampler:sample(normalizedPixelPos)
    local f = self.frequency
    local points = self.samplePoints

    local pixelPos = normalizedPixelPos * f
    
    local cellX = mathfloor(pixelPos.x)
    local cellY = mathfloor(pixelPos.y)
    local localX = pixelPos.x - cellX
    local localY = pixelPos.y - cellY
    local nextCellX = (cellX + 1) % f
    local nextCellY = (cellY + 1) % f
    
    local a = points[cellX + cellY * f]
    local b = points[nextCellX + cellY * f]
    local c = points[cellX + nextCellY * f]
    local d = points[nextCellX + nextCellY * f]
    
    return hermitelerp(localY, hermitelerp(localX, a, b), hermitelerp(localX, c, d))
end

local octaveStack = { { sampler = VoronoiSampler(4, function(a, b) return a:getDistanceSqr(b) end), influence = 0.7 },
                      { sampler = VoronoiSampler(8, function(a, b) return a:getDistanceSqr(b) end), influence = 0.20 },
                      { sampler = VoronoiSampler(16, function(a, b) return a:getDistanceSqr(b) end), influence = 0.10 } }

local colorSampler = LerpSampler(16)

local TEXTURE_RES = 256
local RENDER_SIZE_RT = 1024 / TEXTURE_RES

render.createRenderTarget("backbuffer")

local generateTextureCoroutine = coroutine.wrap(function()
    
    local pointTable = pointTable
    
    local RENDER_SIZE = RENDER_SIZE
    local RENDER_SIZE_RT = RENDER_SIZE_RT
    
    local drawRectFast = render.drawRectFast
    local setColor = render.setColor
    local yield = coroutine.yield
    local max = math.max
    local min = math.min
    local pow = math.pow
    local floor = math.floor
    
    local screenPos = 0
    while screenPos < TEXTURE_RES * TEXTURE_RES - 1 do
    
            local relativeScreenPos = screenPos
            local screenX = relativeScreenPos % TEXTURE_RES
            local screenY = floor(relativeScreenPos / TEXTURE_RES)
                
            local normalizedPixel = Vector(screenX, screenY) / TEXTURE_RES
            
            local avgDist = 0
            
            for i = 1, #octaveStack do
                avgDist = avgDist + min(1, max(0, octaveStack[i].sampler:sample(normalizedPixel))) * octaveStack[i].influence
            end   
        
            avgDist = avgDist * 255
            
            setColor(Color(avgDist, avgDist, avgDist))
            drawRectFast(screenX * RENDER_SIZE_RT, screenY * RENDER_SIZE_RT, RENDER_SIZE_RT, RENDER_SIZE_RT)
            
            screenPos = screenPos + 1
            
            yield()
        
    end
    
    return "done"
    
end)

hook.add("renderoffscreen", "voronoi", function()

    render.selectRenderTarget("backbuffer")

    while math.max(quotaAverage(), quotaUsed()) < quotaMax()*.6 do
        if generateTextureCoroutine() == "done" then
            hook.remove("renderoffscreen", "voronoi")
            break
        end
    end
    
    render.selectRenderTarget(nil)

end)

hook.add("render", "voronoi", function()

    render.setColor(Color(255, 255, 255))
    render.selectRenderTarget(nil)
    render.setRenderTargetTexture("backbuffer")
    render.drawTexturedRectFast(0, 0, 512, 512)
    render.setRenderTargetTexture(nil)

    --[[
    render.setColor(Color(0, 100, 255))
    for y = 0, SIZE - 1 do
        for x = 0, SIZE - 1 do
        
            local location = pointTable[x + y * SIZE + 1]
            
            local px = location.x * RENDER_SIZE
            local py = location.y * RENDER_SIZE
            
            render.drawRectFast(px - 2, py - 2, 4, 4)
            
        end
    end]]
    
end)